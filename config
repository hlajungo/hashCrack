#!/bin/bash

IhashFile="../hash/question.txt"


IdictDir=(
"/media/hlajungo/D/linux/dict/SecLists-master"
"/media/hlajungo/D/linux/dict/crackstation.txt"
)
DICT_MIN_LENGTH=9    #[1,inf]



# the dict that will be used to create rule
ruleGenerateTargetDictFile=(
)

#current_time=$(date +"%Y%m%d%H%M")

NUM_CORES=$(nproc)
PARALLEL_JOBS=$(( NUM_CORES * 3 / 4 ))


rootDir="$(dirname "$(realpath "${BASH_SOURCE[0]}")")"
IpackDir="/media/hlajungo/D/linux/hashCrack/thirdParty/script/pack-master"
IhashcatUtilDir="$rootDir/thirdParty/hashcat-utils"

coreScriptDir="$rootDir/coreScript"
configScriptDir="$rootDir/configScript"
binDir="$rootDir/bin"
tempDir="$rootDir/temp"
mkdir -p "$tempDir"
splitHashDir="$tempDir/splitHash"

outputFile="$rootDir/output.txt"
touch "$outputFile"

restoreDir="$tempDir/restore"

mkdir -p "$restoreDir"
potFile="$tempDir/temp.pot"

dataDir="$rootDir/data"
mkdir -p "$dataDir"







dictDir="$tempDir/dict"
mkdir -p $dictDir
dictNameFile="$dictDir/dictName.txt"
touch $dictNameFile
dictWorkerName="$dictDir/worker_"
dictFile="$dictDir/resultDict.word"
touch $dictFile

ruleDir="$tempDir/rule"
mkdir -p $ruleDir
ruleFile="$ruleDir/resultRule.rule"
touch "$ruleFile"

preProcessedDict="$tempDir/preProcessedDict.word"

maskFile="$tempDir/temp.masks"

md5File="$splitHashDir/md5Hashes.txt"
ruleGenerateTargetDictFile+=("$md5DataFile")

md5cryptFile="$splitHashDir/md5cryptHashes.txt"


bcryptFile="$splitHashDir/bcryptHashes.txt"
bcryptFile="$splitHashDir/bcryptResult.txt"






: <<'END_COMMENT'
--restore-file-path


--session                  | Str  | Define specific session name                         | --session=mysession
     --restore                  |      | Restore session from --session                       |
     --restore-disable          |      | Do not write restore file                            |
     --restore-file-path        | File | Specific path to restore file                        | --restore-file-path=x.restore
 -o, --outfile                  | File | Define outfile for recovered hash                    | -o outfile.txt
     --outfile-format           | Str  | Outfile format to use, separated with commas         | --outfile-format=1,3

 --outfile-check-timer      | Num  | Sets seconds between outfile checks to X             | --outfile-check-timer=30
hashcat --session=mySessionName ...
hashcat --restore-file-path=/p/t/f --session=mySessionName --restore

     --progress-only            |      | Return ideal progress step size and time to process  |
     --cpu-affinity             | Str  | Locks to CPU devices, separated with commas          | --cpu-affinity=1,2,3
-i, --increment                |      | Enable mask increment mode                           |
     --increment-min            | Num  | Start mask incrementing at X                         | --increment-min=4
     --increment-max            | Num  | Stop mask incrementing at X                          | --increment-max=8


     --brain-server             |      | Enable brain server                                  |
     --brain-server-timer       | Num  | Update the brain server dump each X seconds (min:60) | --brain-server-timer=300
 -z, --brain-client             |      | Enable brain client, activates -S                    |
     --brain-client-features    | Num  | Define brain client features, see below              | --brain-client-features=3
     --brain-host               | Str  | Brain server host (IP or domain)                     | --brain-host=127.0.0.1
     --brain-port               | Port | Brain server port                                    | --brain-port=13743
     --brain-password           | Str  | Brain server authentication password                 | --brain-password=bZfhCvGUSjRq
     --brain-session            | Hex  | Overrides automatically calculated brain session     | --brain-session=0x2ae611db
     --brain-session-whitelist  | Hex  | Allow given sessions only, separated with commas     | --brain-session-whitelist=0x2ae611d


     A runner ,take user input, and do the task that input say. 
END_COMMENT

